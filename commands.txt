Middleware => 
middleware is functions are functions that have access to the request object , the response object and the next function
in application request-response cycle.
Middleware functions can execute following tasks:
=>execute any code.
=>Make the changes to the request and response cycle.
=>End the request-response cycle
=>Call the next middleware in stack.

Types of middleware 
1. application level middleware
2. router level middleware
3. Error-handling middleware
4. Built-in middleware
5. Third-party middleware

1. application middleware as we saw in this lecture

2. router level middleware => Will be see in next lectures for handling routers

3. Error-handling middleware => To handle errors
app.use((err, req, res, next) => {
  console.error(err.stack)
  res.status(500).send('Something broke!')
})

4. Built-in middleware
    I. static middleware
    II. express json
    III. express urlencoded

I.Static Middleware
To serve static files such as images, CSS files, and JavaScript files, use the express.static built-in middleware function in Express.
app.use(express.static('public'))

5. Third party middleware = cookie-parser

Lec - 4 : is about error handling middleware 

how to console or handle error when something is broke in code.
simply if you don't use and error handling middleware than it is not that that is it don't show error 
but it wll not show user defined if use don't use error handling middleware than it will give error like this in browser

ReferenceError: res is not defined
    at D:\Express_Practices\app.js:7:5
    at Layer.handle [as handle_request] (D:\Express_Practices\node_modules\express\lib\router\layer.js:95:5)
    at next (D:\Express_Practices\node_modules\express\lib\router\route.js:149:13)
    at Route.dispatch (D:\Express_Practices\node_modules\express\lib\router\route.js:119:3)
    at Layer.handle [as handle_request] (D:\Express_Practices\node_modules\express\lib\router\layer.js:95:5)
    at D:\Express_Practices\node_modules\express\lib\router\index.js:284:15
    at Function.process_params (D:\Express_Practices\node_modules\express\lib\router\index.js:346:12)
    at next (D:\Express_Practices\node_modules\express\lib\router\index.js:280:10)
    at expressInit (D:\Express_Practices\node_modules\express\lib\middleware\init.js:40:5)
    at Layer.handle [as handle_request] (D:\Express_Practices\node_modules\express\lib\router\layer.js:95:5)



but if you use error handling middleware than it will give user defined error like this
Some this broke...



II. Built-in middleware

urlencoded
=> add data in postman x-www-form-urlencoded form it will send data cilent side to serverside  
When there is a HTTP POST request from the client with content type application/x-www-form-urlencoded, this middleware parses the data and populates the req.body object with key-value pairs.


III. static middleware

When we want to print anything from public or any static directory from in folder then static middleware is used.


